LIBPNG_VERSION ?= 1.6.43
UTIL_LINUX_VERSION ?= 2.39
LIBJPEG_VERSION ?= 9f
OPENJP2_VERSION ?= 2.5.2
LIBTIFF_VERSION ?= 4.6.0
LIBXML2_MINOR_VERSION ?= 2.12
LIBXML2_VERSION ?= 2.12.8
GLIB_VERSION ?= 2.80.4
CAIRO_VERSION ?= 1.18.0
LIBCROCO_VERSION ?= 0.6.13
PANGO_VERSION ?= 1.52.2
GDK_PIXBUF_VERSION ?= 2.42.12
LIBFFI_VERSION ?= 3.4.3
LIBRSVG_VERSION ?= 2.60.0
PIXMAN_VERSION ?= 0.43.4
FONTCONFIG_VERSION ?= 2.15.0
FREETYPE_VERSION ?= 2.13.2
BZIP2_VERSION ?= 1.0.8
HARFBUZZ_VERSION ?= 8.5.0

#fontconfig-2.10.95-11.amzn2.0.2.x86_64.rpm
#harfbuzz-1.3.2-1.amzn2.0.2.x86_64.rpm
#freetype-2.4.11-15.amzn2.0.2.x86_64.rpm


# what to tell RSVG where it will expect to run from

TARGET_DIR ?= /opt/

PROJECT_ROOT = $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

## this is a temporary area for libraries; we don't use the main destination 
## because a bunch of these libraries install additional tools and things
## that the final package does not need. in order to minimise the final
## Lambda layer size, this build script first makes/installs static 
## dependencies with their docs and command line tools to the cache area,
## and then just finally installs rsvg into the actual target

CACHE_DIR=$(PROJECT_ROOT)build/cache



.ONESHELL:

CMAKE=cmake3
PKG_CONFIG=PKG_CONFIG_PATH=$(CACHE_DIR)/lib/pkgconfig
MESON_ENV=PKG_CONFIG_PATH=$(CACHE_DIR)/lib/pkgconfig:$(CACHE_DIR)/lib64/pkgconfig PATH=$(CACHE_DIR)/bin:$$PATH LDFLAGS="-L$(CACHE_DIR)/lib -L$(CACHE_DIR)/lib64" CPPFLAGS="-I$(CACHE_DIR)/include" CFLAGS="-fPIC" CXXFLAGS="-fPIC"
CONFIGURE = ./configure \
		CPPFLAGS=-I$(CACHE_DIR)/include \
		LDFLAGS="-L$(CACHE_DIR)/lib -L$(CACHE_DIR)/lib64" \
		CFLAGS="-fPIC" \
		CXXFLAGS="-fPIC" \
		$(PKG_CONFIG) \
		--disable-dependency-tracking \
		--disable-shared \
		--enable-static \
		--disable-rpath \
		--prefix=$(CACHE_DIR)

## dev tool installation

init:
	yum install -y gcc gcc-c++ cmake3 intltool flex bison shared-mime-info gperf python3-pip openssl-devel
	pip3 install meson ninja
	curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain 1.90.0
	. ~/.cargo/env && cargo install cargo-c 

## util-linux has libmount and libuuid etc

LIBUUID=$(CACHE_DIR)/lib/libuuid.a

UTIL_LINUX_SOURCE=util-linux-$(UTIL_LINUX_VERSION).tar.xz
$(UTIL_LINUX_SOURCE):
	curl -LO https://mirrors.edge.kernel.org/pub/linux/utils/util-linux/v$(UTIL_LINUX_VERSION)/$(UTIL_LINUX_SOURCE)

$(LIBUUID): $(UTIL_LINUX_SOURCE)
	tar xf $<
	cd util-linux*
	CFLAGS="-fPIC -std=gnu99" $(CONFIGURE) \
		--disable-all-programs \
		--enable-libuuid \
		--disable-tls
	make
	make install

## libffi

LIBFFI_SOURCE=libffi-$(LIBFFI_VERSION).tar.gz
LIBFFI=$(CACHE_DIR)/lib64/libffi.a

$(LIBFFI_SOURCE): 
# 	curl -LO ftp://sourceware.org/pub/libffi/$(LIBFFI_SOURCE)
	curl -LO https://sourceware.org/pub/libffi/$(LIBFFI_SOURCE)

$(LIBFFI): $(LIBFFI_SOURCE)
	tar xf $<
	cd libffi*
	$(CONFIGURE)
	make
	make install

## GLIB,
# see https://developer.gnome.org/glib/stable/glib-building.html
#
GLIB_SOURCE=glib-$(GLIB_VERSION).tar.xz
GLIB_MINOR_VERSION=$(basename $(GLIB_VERSION))
GLIB_MAJOR_VERSION=$(basename $(GLIB_MINOR_VERSION))
GLIB=$(CACHE_DIR)/lib/libglib-$(GLIB_MAJOR_VERSION).0.a

$(GLIB_SOURCE):
	curl -LO http://ftp.gnome.org/pub/gnome/sources/glib/$(GLIB_MINOR_VERSION)/$(GLIB_SOURCE)

$(GLIB): $(GLIB_SOURCE) $(LIBFFI)
	tar xf $<
	cd glib*
	$(MESON_ENV) meson setup build \
		--prefix=$(CACHE_DIR) \
		--libdir=lib \
		--buildtype=release \
		--default-library=static \
		-Ddocumentation=false \
		-Dman=false \
		-Dlibmount=disabled \
		-Dselinux=disabled \
		-Dxattr=false \
		-Dinstalled_tests=false \
		-Dnls=disabled \
		-Dintrospection=disabled \
		-Dtests=false
	$(MESON_ENV) meson compile -C build
	$(MESON_ENV) meson install -C build

## libxml2

LIBXML2_SOURCE=libxml2-$(LIBXML2_VERSION).tar.xz
LIBXML2=$(CACHE_DIR)/lib/libxml2.a
$(LIBXML2_SOURCE):
# 	curl -LO ftp://xmlsoft.org/libxml2/$(LIBXML2_SOURCE)
	curl -LO https://download.gnome.org/sources/libxml2/$(LIBXML2_MINOR_VERSION)/$(LIBXML2_SOURCE)
$(LIBXML2): $(LIBXML2_SOURCE)
	tar xJf $<
	cd libxml2*
	$(CONFIGURE) \
		--without-history \
		--without-python
	make
	make install

## licroco

LIBCROCO_SOURCE=libcroco-$(LIBCROCO_VERSION).tar.xz
LIBCROCO_MINOR_VERSION=$(basename $(LIBCROCO_VERSION))
LIBCROCO=$(CACHE_DIR)/lib/libcroco-$(LIBCROCO_MINOR_VERSION).a

$(LIBCROCO_SOURCE):
	curl -OL http://ftp.gnome.org/pub/GNOME/sources/libcroco/$(LIBCROCO_MINOR_VERSION)/$(LIBCROCO_SOURCE)

$(LIBCROCO): $(LIBCROCO_SOURCE) $(LIBXML2) $(GLIB)
	tar xf $<
	cd libcroco*
	$(CONFIGURE) \
		--disable-gtk-doc \
		--disable-gtk-doc-html
	make
	make install

## libjpg

LIBJPEG_SOURCE=jpegsrc.v$(LIBJPEG_VERSION).tar.gz

LIBJPEG=$(CACHE_DIR)/lib/libjpeg.a

$(LIBJPEG_SOURCE):
	curl -LO http://ijg.org/files/$(LIBJPEG_SOURCE)

$(LIBJPEG): $(LIBJPEG_SOURCE)
	tar xf $<
	cd jpeg*
	$(CONFIGURE)	 
	make
	make install

## libpng

LIBPNG_SOURCE=libpng-$(LIBPNG_VERSION).tar.xz
LIBPNG=$(CACHE_DIR)/lib/libpng.a

$(LIBPNG_SOURCE):
	curl -LO http://prdownloads.sourceforge.net/libpng/$(LIBPNG_SOURCE)

$(LIBPNG): $(LIBPNG_SOURCE)
	tar xf $<
	cd libpng*
	$(CONFIGURE)	 
	make
	make install

# libbz2

BZIP2_SOURCE=bzip2-$(BZIP2_VERSION).tar.gz
LIBBZ2=$(CACHE_DIR)/lib/libbz2.a

$(BZIP2_SOURCE):
# 	curl -LO http://prdownloads.sourceforge.net/bzip2/bzip2-$(BZIP2_VERSION).tar.gz
	curl -LO https://sourceware.org/pub/bzip2/bzip2-$(BZIP2_VERSION).tar.gz

$(LIBBZ2): $(BZIP2_SOURCE)
	tar xf $<
	cd bzip2-*
	make libbz2.a CFLAGS="-fPIC -Wall -Winline -O2 -g -D_FILE_OFFSET_BITS=64"
	make install PREFIX=$(CACHE_DIR)

# libtiff

LIBTIFF_SOURCE=tiff-$(LIBTIFF_VERSION).tar.gz
LIBTIFF=$(CACHE_DIR)/lib/libtiff.a

$(LIBTIFF_SOURCE):
	curl -LO http://download.osgeo.org/libtiff/$(LIBTIFF_SOURCE)

$(LIBTIFF): $(LIBTIFF_SOURCE)
	tar xf $<
	cd tiff-*
	$(CONFIGURE) \
		--disable-jpeg \
		--disable-old-jpeg \
		--disable-lzma \
		--disable-jpeg12 \
		--without-x
	make
	make install

## libopenjp2

OPENJP2_SOURCE=openjp2-$(OPENJP2_VERSION).tar.gz

$(OPENJP2_SOURCE):
	curl -L https://github.com/uclouvain/openjpeg/archive/v$(OPENJP2_VERSION).tar.gz -o $(OPENJP2_SOURCE)

LIBOPENJP2=$(CACHE_DIR)/lib/libopenjp2.a

$(LIBOPENJP2): $(OPENJP2_SOURCE) $(LIBPNG) $(LIBTIFF)
	tar xf $<
	cd openjpeg-*
	mkdir -p build
	cd build 
	$(PKG_CONFIG) $(CMAKE) .. \
		-DCMAKE_BUILD_TYPE=Release \
		-DCMAKE_INSTALL_PREFIX=$(CACHE_DIR) \
		-DCMAKE_POSITION_INDEPENDENT_CODE=ON \
		-DCMAKE_C_FLAGS="-fPIC" \
		-DCMAKE_CXX_FLAGS="-fPIC" \
		-DBUILD_SHARED_LIBS:bool=off \
		-DBUILD_CODEC:bool=off
	make
	make install

## pixman

PIXMAN_SOURCE=pixman-$(PIXMAN_VERSION).tar.gz
LIBPIXMAN=$(CACHE_DIR)/lib/libpixman-1.a

$(PIXMAN_SOURCE): 
	curl -LO https://www.cairographics.org/releases/$(PIXMAN_SOURCE)

$(LIBPIXMAN): $(PIXMAN_SOURCE) $(LIBPNG)
	tar xf $<
	cd pixman*
	$(MESON_ENV) meson setup build \
		--prefix=$(CACHE_DIR) \
		--libdir=lib \
		--buildtype=release \
		--default-library=static \
		-Dgtk=disabled \
		-Dopenmp=disabled \
		-Dtests=disabled \
		-Ddemos=disabled
	$(MESON_ENV) meson compile -C build
	$(MESON_ENV) meson install -C build

## freetype and harfbuzz co-depend on each other, so freetype needs to be 
## built without harfbuzz first, then harfbuzz with freetype, then freetype again
## see http://www.linuxfromscratch.org/blfs/view/svn/general/harfbuzz.html

FREETYPE_SOURCE=freetype-$(FREETYPE_VERSION).tar.gz
LIBFREETYPE=$(CACHE_DIR)/lib/libfreetype.a
HARFBUZZ_SOURCE=harfbuzz-$(HARFBUZZ_VERSION).tar.xz
LIBHARFBUZZ=$(CACHE_DIR)/lib/libharfbuzz.a

$(FREETYPE_SOURCE): 
	curl -LO https://download.savannah.gnu.org/releases/freetype/$(FREETYPE_SOURCE)

$(HARFBUZZ_SOURCE):
	curl -LO https://github.com/harfbuzz/harfbuzz/releases/download/$(HARFBUZZ_VERSION)/$(HARFBUZZ_SOURCE)

FT_WITHOUT_HB_DIR=$(PROJECT_ROOT)build/freetype-$(FREETYPE_VERSION)-without-harfbuzz
FT_WITHOUT_HB=$(FT_WITHOUT_HB_DIR)/objs/.libs/libfreetype.a

$(FT_WITHOUT_HB): $(FREETYPE_SOURCE)
	tar xf $< -C /tmp
	rm -rf $(FT_WITHOUT_HB_DIR) 
	mv /tmp/freetype-$(FREETYPE_VERSION) $(FT_WITHOUT_HB_DIR)
	cd $(FT_WITHOUT_HB_DIR)
	$(CONFIGURE) --without-harfbuzz
	make
	make install

$(LIBHARFBUZZ): $(HARFBUZZ_SOURCE) $(FT_WITHOUT_HB)
	tar xf $<
	cd harfbuzz-$(HARFBUZZ_VERSION)
	$(MESON_ENV) meson setup build \
		--prefix=$(CACHE_DIR) \
		--libdir=lib \
		--buildtype=release \
		--default-library=static \
		-Dfreetype=enabled \
		-Dglib=enabled \
		-Dgobject=disabled \
		-Dicu=disabled \
		-Dintrospection=disabled \
		-Ddocs=disabled \
		-Dtests=disabled \
		-Dbenchmark=disabled \
		-Dutilities=disabled
	$(MESON_ENV) meson compile -C build
	$(MESON_ENV) meson install -C build

$(LIBFREETYPE): $(FREETYPE_SOURCE) $(GLIB) $(LIBPNG) $(LIBBZ2) $(LIBHARFBUZZ)
	tar xf $<
	cd freetype-$(FREETYPE_VERSION)
	$(CONFIGURE) \
		--with-harfbuzz \
		--with-png \
		--with-bzip2
	make distclean clean
	make
	make install

## fontconfig

FONTCONFIG_SOURCE=fontconfig-$(FONTCONFIG_VERSION).tar.xz
LIBFONTCONFIG=$(CACHE_DIR)/lib/libfontconfig.a

$(FONTCONFIG_SOURCE): 
	curl -LO https://www.freedesktop.org/software/fontconfig/release/$(FONTCONFIG_SOURCE)

fontconfig $(LIBFONTCONFIG): $(FONTCONFIG_SOURCE) $(LIBXML2) $(LIBFREETYPE) $(LIBUUID)
	tar xf $<
	cd fontconfig-$(FONTCONFIG_VERSION)
	$(MESON_ENV) meson setup build \
		--prefix=$(CACHE_DIR) \
		--libdir=lib \
		--buildtype=release \
		--default-library=static \
		-Ddoc=disabled \
		-Dtests=disabled \
		-Dtools=disabled
	$(MESON_ENV) meson compile -C build
	$(MESON_ENV) meson install -C build
	
## cairo

CAIRO_SOURCE=cairo-$(CAIRO_VERSION).tar.xz

LIBCAIRO:=$(CACHE_DIR)/lib/libcairo.a

$(CAIRO_SOURCE):
	curl -OL https://www.cairographics.org/releases/$(CAIRO_SOURCE)

cairo $(LIBCAIRO): $(CAIRO_SOURCE) $(LIBPNG) $(LIBXML2) $(LIBFONTCONFIG) $(LIBPIXMAN)
	tar xf $<
	cd cairo*
	$(MESON_ENV) meson setup build \
		--prefix=$(CACHE_DIR) \
		--libdir=lib \
		--buildtype=release \
		--default-library=static \
		-Dxlib=disabled \
		-Dxcb=disabled \
		-Dxlib-xcb=disabled \
		-Dquartz=disabled \
		-Ddwrite=disabled \
		-Dpng=enabled \
		-Dzlib=enabled \
		-Dfontconfig=enabled \
		-Dfreetype=enabled \
		-Dglib=auto \
		-Dtests=disabled \
		-Dgtk2-utils=disabled \
		-Dgtk_doc=false
	$(MESON_ENV) meson compile -C build
	$(MESON_ENV) meson install -C build

## pango

PANGO_SOURCE=pango-$(PANGO_VERSION).tar.xz
PANGO_MINOR_VERSION=$(basename $(PANGO_VERSION))
PANGO_MAJOR_VERSION=$(basename $(PANGO_MINOR_VERSION))
LIBPANGO:=$(CACHE_DIR)/lib/libpango-$(PANGO_MAJOR_VERSION).0.a

$(PANGO_SOURCE):
	curl -OL https://download.gnome.org/sources/pango/$(PANGO_MINOR_VERSION)/$(PANGO_SOURCE)

$(LIBPANGO): $(PANGO_SOURCE) $(LIBCROCO) $(LIBCAIRO)
	tar xf $<
	cd pango*
	$(MESON_ENV) meson setup build \
		--prefix=$(CACHE_DIR) \
		--libdir=lib \
		--buildtype=release \
		--default-library=static \
		-Dintrospection=disabled \
		-Dfontconfig=enabled
	$(MESON_ENV) meson compile -C build
	$(MESON_ENV) meson install -C build


### GDK_PIXBUF

GDK_PIXBUF_SOURCE=gdk-pixbuf-$(GDK_PIXBUF_VERSION).tar.xz
GDK_PIXBUF_MINOR_VERSION=$(basename $(GDK_PIXBUF_VERSION))
GDK_PIXBUF_MAJOR_VERSION=$(basename $(GDK_PIXBUF_MINOR_VERSION))

LIBGDK_PIXBUF=$(CACHE_DIR)/lib/libgdk_pixbuf-$(GDK_PIXBUF_MAJOR_VERSION).0.a

$(GDK_PIXBUF_SOURCE):
	curl -OL https://download.gnome.org/sources/gdk-pixbuf/$(GDK_PIXBUF_MINOR_VERSION)/$(GDK_PIXBUF_SOURCE)


$(LIBGDK_PIXBUF): $(GDK_PIXBUF_SOURCE) $(LIBPNG) $(LIBOPENJP2) $(LIBJPEG) $(LIBTIFF) $(GLIB)
	tar xf $<
	cd gdk-pixbuf*
	$(MESON_ENV) meson setup build \
		--prefix=$(CACHE_DIR) \
		--libdir=lib \
		--buildtype=release \
		--default-library=static \
		-Dbuiltin_loaders=all \
		-Dgio_sniffing=false \
		-Dintrospection=disabled \
		-Ddocs=false \
		-Dman=false \
		-Dinstalled_tests=false \
		-Dtests=false \
		-Dgtk_doc=false \
		-Dc_link_args="-L$(CACHE_DIR)/lib -L$(CACHE_DIR)/lib64 -ljpeg -lpng -ltiff -lz -lm"
	$(MESON_ENV) meson compile -C build
	$(MESON_ENV) meson install -C build


## RSVG

LIBS:=$(LIBCROCO) $(LIBPANGO) $(LIBCAIRO) $(LIBGDK_PIXBUF)

LIBRSVG_SOURCE=librsvg-$(LIBRSVG_VERSION).tar.xz
LIBRSVG_MINOR_VERSION=$(basename $(LIBRSVG_VERSION))
LIBRSVG_MAJOR_VERSION=$(basename $(LIBRSVG_MINOR_VERSION))

$(LIBRSVG_SOURCE):
	curl -OL https://download.gnome.org/sources/librsvg/$(LIBRSVG_MINOR_VERSION)/$(LIBRSVG_SOURCE)

$(CACHE_DIR)/bin/rsvg-convert: $(LIBRSVG_SOURCE) $(LIBS)
	tar xf $<
	cd librsvg-*
	. ~/.cargo/env && $(MESON_ENV) meson setup build \
		--prefix=$(CACHE_DIR) \
		--libdir=lib \
		--buildtype=release \
		--default-library=static \
		-Dintrospection=disabled \
		-Dvala=disabled \
		-Ddocs=disabled
	. ~/.cargo/env && $(MESON_ENV) meson compile -C build
	. ~/.cargo/env && $(MESON_ENV) meson install -C build

$(TARGET_DIR)bin/rsvg-convert: $(CACHE_DIR)/bin/rsvg-convert
	mkdir -p $(TARGET_DIR)bin
	cp $< $@
	strip -s $@

libs: $(LIBS)

all: $(TARGET_DIR)bin/rsvg-convert
